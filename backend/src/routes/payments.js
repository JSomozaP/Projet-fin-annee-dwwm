const express = require('express');
const router = express.Router();
const db = require('../config/database');
const { authenticateToken } = require('../middleware/auth');

// Initialisation Stripe conditionnelle
let stripe = null;
try {
  if (process.env.STRIPE_SECRET_KEY && process.env.STRIPE_SECRET_KEY !== 'sk_test_placeholder_remplacer_par_vraie_cle') {
    stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
    console.log('‚úÖ Stripe initialis√© avec succ√®s');
  } else {
    console.log('‚ö†Ô∏è  Stripe non initialis√© - cl√© de d√©veloppement d√©tect√©e');
  }
} catch (error) {
  console.error('‚ùå Erreur initialisation Stripe:', error.message);
}

// Configuration des plans d'abonnement
const SUBSCRIPTION_PLANS = {
  free: {
    id: 'free',
    name: 'Gratuit',
    price: 0,
    currency: 'EUR',
    interval: 'month',
    description: 'Acc√®s de base √† Streamyscovery',
    features: [
      'Acc√®s √† tous les niveaux 1-200',
      '6 qu√™tes quotidiennes',
      '4 qu√™tes hebdomadaires', 
      '3 qu√™tes mensuelles',
      'Interface standard'
    ],
    highlighted: false
  },
  premium: {
    id: 'premium',
    name: 'Premium',
    price: 5,
    currency: 'EUR',
    interval: 'month',
    description: 'Am√©liorez votre exp√©rience de d√©couverte',
    features: [
      'Boost XP +5%',
      '8 qu√™tes quotidiennes (+2)',
      'Qu√™tes premium exclusives',
      'Badge Premium exclusif',
      'Th√®mes cosm√©tiques'
    ],
    highlighted: false
  },
  vip: {
    id: 'vip',
    name: 'VIP', 
    price: 9,
    currency: 'EUR',
    interval: 'month',
    description: 'Exp√©rience VIP avec analytics personnelles',
    features: [
      'Boost XP +10%',
      '9 qu√™tes quotidiennes (+3)',
      '5 qu√™tes hebdomadaires (+1)',
      'Analytics personnelles',
      'Th√®mes VIP exclusifs'
    ],
    highlighted: true,
    badge: 'POPULAIRE'
  },
  legendary: {
    id: 'legendary',
    name: 'L√©gendaire',
    price: 15,
    currency: 'EUR',
    interval: 'month',
    description: 'L\'exp√©rience ultime de Streamyscovery',
    features: [
      'Boost XP +15%',
      '10 qu√™tes quotidiennes (+4)',
      '6 qu√™tes hebdomadaires (+2)',
      'Analytics avanc√©es',
      'Support prioritaire',
      'Th√®mes l√©gendaires exclusifs'
    ],
    highlighted: false
  }
};

/**
 * Obtenir la liste des plans disponibles
 * GET /api/payments/plans
 */
router.get('/plans', (req, res) => {
  try {
    res.json({
      success: true,
      plans: SUBSCRIPTION_PLANS
    });
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration plans:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Erreur lors de la r√©cup√©ration des plans' 
    });
  }
});

/**
 * Obtenir le statut d'abonnement d'un utilisateur
 * GET /api/payments/subscription-status
 */
router.get('/subscription-status', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.userId;
    
    // Pour l'instant, retourner un statut par d√©faut
    res.json({
      success: true,
      subscription: {
        tier: 'free',
        status: 'active',
        current_period_end: null,
        features: []
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration statut:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Erreur lors de la r√©cup√©ration du statut d\'abonnement' 
    });
  }
});

/**
 * Route de test pour v√©rifier que l'API fonctionne
 * GET /api/payments/test
 */
router.get('/test', (req, res) => {
  res.json({
    success: true,
    message: 'API Payments fonctionne !',
    timestamp: new Date().toISOString(),
    stripe_available: !!stripe
  });
});

/**
 * Cr√©er une session de checkout Stripe
 * POST /api/payments/create-checkout-session
 */
router.post('/create-checkout-session', async (req, res) => {
  try {
    const { planId } = req.body;
    const userId = 'f7be123d-6c57-11f0-8ddb-d415e749b7bc'; // ID pouikdev
    
    console.log(`üîÑ Cr√©ation session Stripe pour plan: ${planId}, user: ${userId}`);

    // Validation du plan
    if (!SUBSCRIPTION_PLANS[planId]) {
      return res.status(400).json({ 
        success: false, 
        message: 'Plan d\'abonnement invalide' 
      });
    }

    const selectedPlan = SUBSCRIPTION_PLANS[planId];

    if (!stripe) {
      // Mode mock pour le d√©veloppement si Stripe pas configur√©
      return res.json({
        success: true,
        mock: true,
        message: 'Session cr√©√©e en mode d√©veloppement',
        plan: selectedPlan,
        user_id: userId,
        sessionId: 'mock_session_' + Date.now()
      });
    }

    // Cr√©ation de la vraie session Stripe
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [
        {
          price_data: {
            currency: 'eur',
            product_data: {
              name: `Streamyscovery ${selectedPlan.name}`,
              description: selectedPlan.description,
              images: ['https://streamyscovery.com/logo.png'], // Remplacer par votre vraie URL
            },
            unit_amount: selectedPlan.price * 100, // Prix en centimes
            recurring: {
              interval: selectedPlan.interval,
            },
          },
          quantity: 1,
        },
      ],
      mode: 'subscription',
      success_url: `${process.env.FRONTEND_URL || 'http://localhost:4200'}/subscription/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.FRONTEND_URL || 'http://localhost:4200'}/subscription/cancel`,
      client_reference_id: userId,
      metadata: {
        userId: userId,
        planId: planId
      }
    });

    console.log('‚úÖ Session Stripe cr√©√©e:', session.id);

    res.json({
      success: true,
      sessionId: session.id,
      url: session.url,
      plan: selectedPlan
    });

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation session Stripe:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Erreur lors de la cr√©ation de la session de paiement',
      error: error.message
    });
  }
});

/**
 * Webhook Stripe pour traiter les √©v√©nements de paiement
 * POST /api/payments/webhook
 */
router.post('/webhook', express.raw({type: 'application/json'}), async (req, res) => {
  const sig = req.headers['stripe-signature'];
  const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;

  let event;

  try {
    // V√©rifier la signature du webhook
    if (!stripe) {
      console.log('‚ö†Ô∏è Stripe non initialis√© - webhook ignor√©');
      return res.status(400).send('Stripe non configur√©');
    }

    // Mode test local : accepter les requ√™tes sans signature si elles contiennent "test"
    const isLocalTest = req.body && JSON.stringify(req.body).includes('test_simulation');
    
    if (!endpointSecret || endpointSecret === 'whsec_placeholder_secret' || isLocalTest) {
      console.log('üß™ Mode test local - validation signature ignor√©e');
      // En mode d√©veloppement, on peut traiter l'√©v√©nement sans validation
      event = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;
    } else {
      // Validation de la signature en production
      event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);
    }

    console.log(`üîî Webhook re√ßu: ${event.type}`);

    // Traiter les diff√©rents types d'√©v√©nements
    switch (event.type) {
      case 'checkout.session.completed':
        await handleCheckoutSessionCompleted(event.data.object);
        break;
      
      case 'customer.subscription.created':
        await handleSubscriptionCreated(event.data.object);
        break;
      
      case 'customer.subscription.updated':
        await handleSubscriptionUpdated(event.data.object);
        break;
      
      case 'customer.subscription.deleted':
        await handleSubscriptionDeleted(event.data.object);
        break;
      
      case 'invoice.payment_succeeded':
        await handlePaymentSucceeded(event.data.object);
        break;
      
      case 'invoice.payment_failed':
        await handlePaymentFailed(event.data.object);
        break;
      
      default:
        console.log(`‚ö†Ô∏è √âv√©nement non g√©r√©: ${event.type}`);
    }

    res.json({received: true});

  } catch (err) {
    console.error('‚ùå Erreur webhook:', err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }
});

/**
 * G√©rer la completion d'une session de checkout
 */
async function handleCheckoutSessionCompleted(session) {
  try {
    console.log('‚úÖ Checkout session completed:', session.id);
    
    const userId = session.client_reference_id || session.metadata?.userId;
    const planId = session.metadata?.planId;
    
    if (!userId) {
      console.error('‚ùå User ID manquant dans les m√©tadonn√©es');
      return;
    }

    // Mode test local - √©viter les appels API Stripe
    if (session.id.includes('test_simulation')) {
      console.log('üß™ Mode test local d√©tect√© - simulation activation abonnement');
      
      // Simuler les donn√©es de subscription
      const mockSubscription = {
        id: session.subscription || 'sub_test_simulation',
        status: 'active',
        current_period_end: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60), // +30 jours
        plan: { id: planId }
      };
      
      await activateUserSubscription(userId, planId, mockSubscription);
      console.log(`üéâ Abonnement ${planId} activ√© pour l'utilisateur ${userId} (mode test)`);
      return;
    }

    // R√©cup√©rer les d√©tails de la subscription en mode r√©el
    if (session.subscription) {
      const subscription = await stripe.subscriptions.retrieve(session.subscription);
      await activateUserSubscription(userId, planId, subscription);
    }

  } catch (error) {
    console.error('‚ùå Erreur checkout session completed:', error);
  }
}

/**
 * G√©rer la cr√©ation d'un abonnement
 */
async function handleSubscriptionCreated(subscription) {
  try {
    console.log('‚úÖ Subscription created:', subscription.id);
    // Logique de cr√©ation d'abonnement
  } catch (error) {
    console.error('‚ùå Erreur subscription created:', error);
  }
}

/**
 * G√©rer la mise √† jour d'un abonnement
 */
async function handleSubscriptionUpdated(subscription) {
  try {
    console.log('üîÑ Subscription updated:', subscription.id);
    // Logique de mise √† jour d'abonnement
  } catch (error) {
    console.error('‚ùå Erreur subscription updated:', error);
  }
}

/**
 * G√©rer la suppression d'un abonnement
 */
async function handleSubscriptionDeleted(subscription) {
  try {
    console.log('‚ùå Subscription deleted:', subscription.id);
    // Logique de suppression d'abonnement
    const userId = subscription.metadata?.userId;
    if (userId) {
      await deactivateUserSubscription(userId);
    }
  } catch (error) {
    console.error('‚ùå Erreur subscription deleted:', error);
  }
}

/**
 * G√©rer un paiement r√©ussi
 */
async function handlePaymentSucceeded(invoice) {
  try {
    console.log('üí∞ Payment succeeded:', invoice.id);
    // Logique de paiement r√©ussi
  } catch (error) {
    console.error('‚ùå Erreur payment succeeded:', error);
  }
}

/**
 * G√©rer un paiement √©chou√©
 */
async function handlePaymentFailed(invoice) {
  try {
    console.log('üí∏ Payment failed:', invoice.id);
    // Logique de paiement √©chou√©
  } catch (error) {
    console.error('‚ùå Erreur payment failed:', error);
  }
}

/**
 * Activer l'abonnement d'un utilisateur dans la base de donn√©es
 */
async function activateUserSubscription(userId, planId, subscription) {
  try {
    console.log(`üéØ Activation abonnement pour user ${userId}, plan ${planId}`);
    
    // Ins√©rer ou mettre √† jour dans la table subscriptions
    const query = `
      INSERT INTO subscriptions (
        user_id, 
        subscription_tier, 
        stripe_subscription_id, 
        status, 
        current_period_start, 
        current_period_end,
        created_at,
        updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, NOW(), NOW())
      ON DUPLICATE KEY UPDATE
        subscription_tier = VALUES(subscription_tier),
        stripe_subscription_id = VALUES(stripe_subscription_id),
        status = VALUES(status),
        current_period_start = VALUES(current_period_start),
        current_period_end = VALUES(current_period_end),
        updated_at = NOW()
    `;
    
    const values = [
      userId,
      planId,
      subscription.id,
      subscription.status,
      new Date(subscription.current_period_start * 1000),
      new Date(subscription.current_period_end * 1000)
    ];
    
    await db.pool.query(query, values);
    
    // Mettre √† jour le tier de l'utilisateur
    await updateUserTier(userId, planId);
    
    console.log(`‚úÖ Abonnement activ√© pour user ${userId}`);
    
  } catch (error) {
    console.error('‚ùå Erreur activation abonnement:', error);
  }
}

/**
 * D√©sactiver l'abonnement d'un utilisateur
 */
async function deactivateUserSubscription(userId) {
  try {
    console.log(`üö´ D√©sactivation abonnement pour user ${userId}`);
    
    // Mettre √† jour le statut dans la table subscriptions
    const query = `
      UPDATE subscriptions 
      SET status = 'canceled', updated_at = NOW() 
      WHERE user_id = ?
    `;
    
    await db.pool.query(query, [userId]);
    
    // Remettre l'utilisateur en tier gratuit
    await updateUserTier(userId, 'free');
    
    console.log(`‚úÖ Abonnement d√©sactiv√© pour user ${userId}`);
    
  } catch (error) {
    console.error('‚ùå Erreur d√©sactivation abonnement:', error);
  }
}

/**
 * Mettre √† jour le tier d'un utilisateur
 */
async function updateUserTier(userId, tier) {
  try {
    const query = `
      UPDATE utilisateur 
      SET subscription_tier = ?
      WHERE id = ?
    `;
    
    await db.pool.query(query, [tier, userId]);
    console.log(`‚úÖ Tier mis √† jour: ${userId} -> ${tier}`);
    
  } catch (error) {
    console.error('‚ùå Erreur mise √† jour tier:', error);
  }
}

module.exports = router;